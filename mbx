#!/bin/bash
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

set -e

ROOT="$(cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P)"
mkdir -p "$ROOT/boxes"
touch "$ROOT/boxes/boxes.list"
export LIBVIRT_DEFAULT_URI="qemu:///system"
echo "MonkeyBox 🐵 v0.4"

usage() {
  echo "Usage: $0 {init|package|list|deploy|launch|test|dev|agentscp|ssh|stop|start|destroy} [options]"
  echo "Available commands are:"
  echo "   init: initialises monkeynet and mbx templates"
  echo "   package: builds packages from a git repo and sha/tag/branch"
  echo "   list: lists available environments"
  echo "   deploy: creates QA env with two monkeybox VMs and creates marvin cfg file"
  echo "   launch: launches QA env zone using environment's marvin cfg file"
  echo "   test: start marvin tests"
  echo "   dev: creates dev env with a single monkeybox VM and creates marvin cfg file"
  echo "   agentscp: updates KVM agent in dev environment using scp and restarts it"
  echo "   ssh: ssh into a mbx VM"
  echo "   stop: stop all env VMs"
  echo "   start: start all env VMs"
  echo "   destroy: destroy environment"
}

network_exists() {
  virsh net-list --all --name | grep -q "$1"
}

download_and_verify_template() {
  local template="$1"
  wget -nc "https://download.cloudstack.org/templates/mbx/$template.qcow2" -O "$ROOT/templates/$template.qcow2" || true
  virsh define "$ROOT/templates/xmls/mbxt-$template.xml" >/dev/null
}

initialize_network() {
  if network_exists "monkeynet"; then
    echo "'monkeynet' network is already defined, skipped re-initialization"
  else
    virsh net-destroy monkeynet 2>/dev/null || true
    virsh net-undefine monkeynet 2>/dev/null || true
    virsh net-define "$ROOT/monkeynet.xml"
    virsh net-autostart monkeynet
    virsh net-start monkeynet
  fi
}

setup_sudoers_file() {
  echo "Setting up mbx sudoers file. Please enter sudoer password if you're prompted."
  sudo cp "$ROOT/files/sudoer.mbx" /etc/sudoers.d/mbx
}

update_templates() {
  for template in $(cat "$ROOT/templates/md5sum.txt" | awk '{print $2}' | sed 's/.qcow2//g'); do
    echo "Updating template: $template"
    download_and_verify_template "$template"
  done
  echo "Running md5 checksum checks on templates (this may take some time...)"
  (cd "$ROOT/templates" && md5sum --check md5sum.txt)
}

init() {
  initialize_network
  setup_sudoers_file

  for template in $(virsh list --all | awk '{print $2}' | grep mbxt-); do
    echo "Forgetting template: $template"
    virsh undefine "$template" >/dev/null 2>/dev/null || true
  done

  echo "Updating templates"
  update_templates

  sudo cp "$ROOT/files/libvhd.so.1.0" /usr/lib/
  sudo ldconfig
  sudo cp "$ROOT/files/vhd-util" /usr/bin/
}

list() {
  echo
  for env in $(cat "$ROOT/boxes/boxes.list"); do
    echo -e "Name: \033[4m$env\033[0m"
    for vm in $(cat "$ROOT/boxes/$env/list"); do
      ip=$(getent hosts "$vm" | awk '{ print $1 }')
      url=""
      [[ $vm == *"mgmt"* ]] && url="http://$ip:8080/client"
      echo -e "$vm\t$ip\t$url"
      if [[ $vm == *vmw-host1* ]]; then
        vcip=$(sshpass -p 'P@ssword123' ssh -o "ConnectTimeout=1" -o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no" root@"$vm" vim-cmd "vmsvc/get.guest 1 | grep ipAddress | head -1 | sed 's/.*ipAddress = \"//g' | sed 's/\".*//g'" 2> /dev/null) || true
        echo -e "$env-vcsvr\t$vcip\thttps://$vcip/"
      fi
    done
    echo
  done

  echo "Following mbx templates are available:"
  virsh list --all | grep mbxt- | awk '{print $2}'
}

parse_args() {
  local COMMAND
  local OPTIONS
  local PARSED_ARGS

  COMMAND="$1"
  shift

  case "$COMMAND" in
    init|list|test)
      OPTIONS=$(getopt -o h --long help -- "$@")
      ;;
    package|deploy|dev|agentscp|ssh|stop|start|destroy)
      OPTIONS=$(getopt -o h --long help -- "$@")
      ;;
    launch)
      OPTIONS=$(getopt -o h --long help -- "$@")
      ;;
    *)
      usage
      exit 1
      ;;
  esac

  eval set -- "$OPTIONS"
  while true; do
    case "$1" in
      -h|--help)
        usage
        exit 0
        ;;
      --)
        shift
        break
        ;;
      *)
        echo "Unknown option: $1"
        usage
        exit 1
        ;;
    esac
  done

  PARSED_ARGS=("$@")
  execute_command "$COMMAND" "${PARSED_ARGS[@]}"
}

execute_command() {
  local COMMAND="$1"
  shift

  case "$COMMAND" in
    init) init ;;
    list) list ;;
    package) package "$@" ;;
    deploy) deploy "$@" ;;
    launch) launch "$@" ;;
    test) test ;;
    dev) dev "$@" ;;
    agentscp) agentscp "$@" ;;
    ssh) ssh_into_vm "$@" ;;
    stop) stop "$@" ;;
    start) start "$@" ;;
    destroy) destroy "$@" ;;
    *) usage ;;
  esac
}

parse_args "$@"
